{"ast":null,"code":"import { environment } from './../../environments/environment';\nimport { of, throwError } from 'rxjs';\nimport { catchError, mapTo } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API = environment.apiURL;\nconst NOT_MODIFIED = '304';\nexport let AnimaisService = /*#__PURE__*/(() => {\n  class AnimaisService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n    /**\r\n     * Obtém a relação de imagens para um determinado usuário.\r\n     * @param nomeDoUsuario O nome do usuário logado.\r\n     * @returns Um Observable com a relação de imagens.\r\n     */\n\n\n    listaDoUsuario(nomeDoUsuario) {\n      return this.httpClient.get(`${API}/${nomeDoUsuario}/photos`);\n    }\n    /**\r\n     * Busca imagem de acordo com o seu ID.\r\n     * @param id Identificador da imagem.\r\n     * @returns Um Observable com a imagem.\r\n     */\n\n\n    buscaPorId(id) {\n      return this.httpClient.get(`${API}/photos/${id}`);\n    }\n    /**\r\n     * Exclui uma imagem de acordo com seu ID.\r\n     * @param id Identificador da imagem.\r\n     * @returns Um Observable da imagem deletada.\r\n     */\n\n\n    excluiAnimal(id) {\n      return this.httpClient.delete(`${API}/photos/${id}`);\n    }\n    /**\r\n     * Curti uma imagem de acordo com o seu ID.\r\n     * @param id Identificador da imagem.\r\n     * @returns Observable com true ou false.\r\n     */\n\n\n    curtir(id) {\n      return this.httpClient.post(`${API}/photos/${id}/like`, {}, {\n        observe: 'response'\n      }).pipe(mapTo(true), catchError(error => {\n        return error.status === NOT_MODIFIED ? of(false) : throwError(error);\n      }));\n    }\n    /**\r\n     * Salva uma imagem na base de dados.\r\n     * @param descricao Descrição da imagem.\r\n     * @param permiteComentario Se a foto irá permitir comentários.\r\n     * @param arquivo O arquivo da imagem a ser salva.\r\n     * @returns Observable de HttpEvent.\r\n     */\n\n\n    upload(descricao, permiteComentario, arquivo) {\n      const formData = new FormData();\n      formData.append('description', descricao);\n      formData.append('allowComments', permiteComentario ? 'true' : 'false');\n      formData.append('imageFile', arquivo);\n      return this.httpClient.post(`${API}/photos/upload`, formData, {\n        observe: 'events',\n        reportProgress: true\n      });\n    }\n\n  }\n\n  AnimaisService.ɵfac = function AnimaisService_Factory(t) {\n    return new (t || AnimaisService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AnimaisService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AnimaisService,\n    factory: AnimaisService.ɵfac,\n    providedIn: 'root'\n  });\n  return AnimaisService;\n})();","map":null,"metadata":{},"sourceType":"module"}