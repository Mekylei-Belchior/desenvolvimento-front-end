{"ast":null,"code":"import { environment } from './../../environments/environment';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./usuario/usuario.service\";\nconst API = environment.apiURL;\nexport let AutenticacaoService = /*#__PURE__*/(() => {\n  class AutenticacaoService {\n    constructor(httpClient, usuarioService) {\n      this.httpClient = httpClient;\n      this.usuarioService = usuarioService;\n      this.url = `${API}/user/login`;\n    }\n    /**\r\n     * Realiza a autenticação do usuário.\r\n     * @param usuario Nome de usuário.\r\n     * @param senha Chave de acesso.\r\n     * @returns Um Observable do tipo HttpResponse.\r\n     */\n\n\n    autentica(usuario, senha) {\n      const credenciais = {\n        userName: usuario,\n        password: senha\n      };\n      return this.httpClient.post(this.url, credenciais, {\n        observe: 'response'\n      }).pipe(tap(response => {\n        var _a;\n\n        const tokenAutenticacao = (_a = response.headers.get('x-access-token')) !== null && _a !== void 0 ? _a : '';\n        this.usuarioService.salvaToken(tokenAutenticacao);\n      }));\n    }\n\n  }\n\n  AutenticacaoService.ɵfac = function AutenticacaoService_Factory(t) {\n    return new (t || AutenticacaoService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UsuarioService));\n  };\n\n  AutenticacaoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AutenticacaoService,\n    factory: AutenticacaoService.ɵfac,\n    providedIn: 'root'\n  });\n  return AutenticacaoService;\n})();","map":null,"metadata":{},"sourceType":"module"}